from typing import ClassVar

class Vector2:
    """An immutable two-dimensional vector"""

    zero: ClassVar[Vector2]
    """Shorthand for ``Vector2(0.0, 0.0)``"""
    one: ClassVar[Vector2]
    """Shorthand for ``Vector2(1.0, 1.0)``"""
    up: ClassVar[Vector2]
    """A unit vector pointing up (vector j). Shorthand for ``Vector2(0.0, 1.0)``"""
    down: ClassVar[Vector2]
    """A unit vector pointing down. Shorthand for ``Vector2(0.0, -1.0)``"""
    left: ClassVar[Vector2]
    """A unit vector pointing left. Shorthand for ``Vector2(-1.0, 0.0)``"""
    right: ClassVar[Vector2]
    """A unit vector pointing right (vector i). Shorthand for ``Vector2(1.0, 0.0)``"""

    def __init__(self, x: float, y: float) -> None: ...

    def __getitem__(self, i: int) -> float: ...

    @property
    def x(self) -> float: ...

    @property
    def y(self) -> float: ...

    def __add__(self, other: Vector2) -> Vector2: ...

    def __sub__(self, other: Vector2) -> Vector2: ...

    def __mul__(self, other: Vector2 | float | int) -> Vector2: ...

    def __rmul__(self, other: Vector2 | float | int) -> Vector2: ...

    def __truediv__(self, other: Vector2 | float | int) -> Vector2: ...

    def __floordiv__(self, other: Vector2 | float | int) -> Vector2: ...

    def __mod__(self, other: Vector2 | float | int) -> Vector2: ...

    def __divmod__(self, other: Vector2 | float | int) -> tuple[Vector2, Vector2]: ...

    def __neg__(self) -> Vector2: ...

    def __abs__(self) -> Vector2: ...

    def __eq__(self, other: Vector2) -> bool: ...
